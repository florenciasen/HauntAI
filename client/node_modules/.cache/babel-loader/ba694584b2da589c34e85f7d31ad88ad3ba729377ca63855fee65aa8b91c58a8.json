{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flore\\\\OneDrive\\\\Dokumen\\\\GitHub\\\\HauntAI\\\\client\\\\src\\\\pages\\\\HomePage\\\\Homepage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Homepage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s();\n  const [fileUploaded, setFileUploaded] = useState(false);\n  const [folderUploaded, setFolderUploaded] = useState(false);\n  const [folderStructure, setFolderStructure] = useState([]); // Store full folder structure\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadStatus, setUploadStatus] = useState({\n    uploaded: false,\n    analyzed: false,\n    message: \"\",\n    analysisResults: []\n  });\n  const [isUploading, setIsUploading] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [fileProgress, setFileProgress] = useState({});\n  const [analysisProgress, setAnalysisProgress] = useState({});\n  const CHUNK_SIZE = 1024 * 1024 * 500; // 500MB\n\n  const handleFileUpload = event => {\n    const files = event.target.files;\n    if (files.length > 0) {\n      setSelectedFiles(Array.from(files));\n      setFileUploaded(true);\n      setFolderUploaded(false);\n      setFolderStructure([]); // Clear folder structure\n      console.log(`Selected ${files.length} files for upload`);\n    }\n  };\n\n  // Process folder structure from DataTransferItemList\n  const processEntries = async (entry, path = \"\") => {\n    const items = [];\n    if (entry.isFile) {\n      return new Promise(resolve => {\n        entry.file(file => {\n          // Create a new file object with the path information\n          const fileWithPath = Object.assign(file, {\n            webkitRelativePath: path + file.name,\n            fullPath: path + file.name,\n            isFile: true\n          });\n          items.push(fileWithPath);\n          resolve(items);\n        });\n      });\n    } else if (entry.isDirectory) {\n      const dirReader = entry.createReader();\n      const newPath = path + entry.name + \"/\";\n\n      // Create a directory entry object\n      const dirEntry = {\n        name: entry.name,\n        fullPath: newPath,\n        isDirectory: true,\n        children: []\n      };\n      items.push(dirEntry);\n      return new Promise(resolve => {\n        const readEntries = () => {\n          dirReader.readEntries(async entries => {\n            if (entries.length === 0) {\n              resolve(items);\n            } else {\n              for (const childEntry of entries) {\n                const childItems = await processEntries(childEntry, newPath);\n\n                // If this is a directory, add its children to the directory entry\n                if (childEntry.isDirectory) {\n                  dirEntry.children.push(...childItems);\n                } else {\n                  // If it's a file, add it to our items array\n                  items.push(...childItems);\n                }\n              }\n              readEntries(); // Continue reading until all entries are processed\n            }\n          });\n        };\n        readEntries();\n      });\n    }\n    return items;\n  };\n  const handleFolderUpload = async event => {\n    if (!event.target.files || event.target.files.length === 0) return;\n\n    // Get the DataTransferItems from the input\n    const items = event.dataTransfer ? event.dataTransfer.items : null;\n    if (items && items.length > 0) {\n      // Using the modern DataTransferItem API to get folder structure\n      setIsUploading(true);\n      const rootEntry = items[0].webkitGetAsEntry();\n      if (rootEntry) {\n        const structure = await processEntries(rootEntry);\n        console.log(\"Folder structure:\", structure);\n\n        // Extract all files from the structure\n        const allFiles = extractFilesFromStructure(structure);\n        console.log(\"All files:\", allFiles);\n        setFolderStructure(structure);\n        setSelectedFiles(allFiles);\n        setFolderUploaded(true);\n        setFileUploaded(false);\n      }\n      setIsUploading(false);\n    } else {\n      // Fallback for older browsers or when drag-and-drop is not used\n      const files = Array.from(event.target.files);\n\n      // Create folder structure from webkitRelativePath\n      const structure = createFolderStructureFromFiles(files);\n      console.log(\"Created folder structure:\", structure);\n\n      // Filter files to only include .js or .py files\n      const fileList = files.filter(file => file.name.endsWith(\".js\") || file.name.endsWith(\".py\"));\n      if (fileList.length > 0) {\n        setSelectedFiles(fileList);\n        setFolderStructure(structure);\n        setFolderUploaded(true);\n        setFileUploaded(false);\n        console.log(`Selected ${fileList.length} files from folder`);\n      } else {\n        console.warn(\"No .js or .py files found in folder\");\n        alert(\"Tidak ada file dengan ekstensi .js atau .py yang ditemukan.\");\n        setFolderUploaded(false);\n      }\n    }\n  };\n\n  // Helper function to create folder structure from file list (using webkitRelativePath)\n  const createFolderStructureFromFiles = files => {\n    const root = {\n      name: \"root\",\n      isDirectory: true,\n      children: []\n    };\n    for (const file of files) {\n      if (!file.webkitRelativePath) continue;\n      const pathParts = file.webkitRelativePath.split('/');\n      let currentLevel = root;\n\n      // Process directories in the path\n      for (let i = 0; i < pathParts.length - 1; i++) {\n        const folderName = pathParts[i];\n        let folderFound = false;\n\n        // Check if the folder already exists at this level\n        for (const child of currentLevel.children) {\n          if (child.isDirectory && child.name === folderName) {\n            currentLevel = child;\n            folderFound = true;\n            break;\n          }\n        }\n\n        // If folder doesn't exist, create it\n        if (!folderFound) {\n          const newFolder = {\n            name: folderName,\n            isDirectory: true,\n            fullPath: pathParts.slice(0, i + 1).join('/') + '/',\n            children: []\n          };\n          currentLevel.children.push(newFolder);\n          currentLevel = newFolder;\n        }\n      }\n\n      // Add the file to the current directory level\n      currentLevel.children.push({\n        name: file.name,\n        fullPath: file.webkitRelativePath,\n        isFile: true,\n        file: file\n      });\n    }\n\n    // Return children of root (skip the artificial root node)\n    return root.children;\n  };\n\n  // Helper function to extract all file objects from structure\n  const extractFilesFromStructure = structure => {\n    const files = [];\n    const traverse = items => {\n      for (const item of items) {\n        if (item.isFile) {\n          files.push(item);\n        } else if (item.isDirectory && item.children) {\n          traverse(item.children);\n        }\n      }\n    };\n    traverse(structure);\n    return files;\n  };\n  const uploadChunk = async (file, start, chunk, sessionId) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk);\n    formData.append(\"sessionId\", sessionId);\n    formData.append(\"start\", start);\n    formData.append(\"total_size\", file.size);\n    formData.append(\"filename\", file.name);\n    // Add path information for folder structure\n    if (file.fullPath) {\n      formData.append(\"filepath\", file.fullPath);\n    }\n    console.log(`Uploading chunk for ${file.name}: ${start}-${start + chunk.size} of ${file.size}`);\n    const response = await fetch(\"http://localhost:5000/upload-chunk\", {\n      method: \"POST\",\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Upload chunk failed: ${response.statusText}`);\n    }\n    const result = await response.json();\n    console.log(`Chunk upload response:`, result);\n\n    // Update progress for this specific file\n    const progress = Math.min(Math.round((start + chunk.size) / file.size * 100), 100);\n    setFileProgress(prevProgress => ({\n      ...prevProgress,\n      [file.name]: progress // Update progress for this file\n    }));\n    return result;\n  };\n\n  // Function to analyze files with Gemini API\n  const analyzeFilesWithGemini = async (savedFiles, uploadFolder) => {\n    setIsAnalyzing(true);\n    console.log(\"Starting Gemini analysis for files:\", savedFiles);\n    try {\n      // Initialize analysis progress for each file\n      const initialProgress = {};\n      savedFiles.forEach(filePath => {\n        const fileName = filePath.split('/').pop();\n        initialProgress[fileName] = 0;\n      });\n      setAnalysisProgress(initialProgress);\n\n      // Send request to analyze files\n      const analysisResponse = await fetch(\"http://localhost:5000/analyze-files\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          files: savedFiles,\n          folder: uploadFolder,\n          analysisPrompt: \"Analyze this code and identify any security vulnerabilities, hardcoded credentials, or sensitive data. Also suggest improvements for code quality and performance. Structure your response with clear sections for issues found and recommendations.\"\n        })\n      });\n      if (!analysisResponse.ok) {\n        throw new Error(\"Failed to analyze files with Gemini API\");\n      }\n      const analysisResult = await analysisResponse.json();\n      console.log(\"Analysis completed:\", analysisResult);\n      setUploadStatus(prev => ({\n        ...prev,\n        analyzed: true,\n        analysisResults: analysisResult.analyzed_files || []\n      }));\n      alert(\"Analysis complete! You can now view the results.\");\n    } catch (error) {\n      console.error(\"Analysis error:\", error);\n      alert(\"Error analyzing files: \" + error.message);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  const handleUploadToBackend = async () => {\n    if (selectedFiles.length === 0) {\n      console.warn(\"No files selected for upload\");\n      alert(\"Tidak ada file yang dipilih.\");\n      return;\n    }\n    setIsUploading(true);\n    const sessionId = Date.now().toString();\n    console.log(`Starting upload session: ${sessionId}`);\n    try {\n      for (const file of selectedFiles) {\n        console.log(`Processing file: ${file.name} (${file.size} bytes)`);\n        let start = 0;\n        while (start < file.size) {\n          const chunk = file.slice(start, start + CHUNK_SIZE);\n          await uploadChunk(file, start, chunk, sessionId);\n          start += CHUNK_SIZE;\n        }\n        // Once the file is uploaded, update progress to 100%\n        setFileProgress(prevProgress => ({\n          ...prevProgress,\n          [file.name]: 100\n        }));\n        console.log(`Completed uploading file: ${file.name}`);\n      }\n      console.log(\"All files uploaded, finalizing...\");\n      const finalizeResponse = await fetch(\"http://localhost:5000/finalize-upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          files: selectedFiles.map(f => ({\n            filename: f.name,\n            size: f.size,\n            filepath: f.fullPath || f.webkitRelativePath || f.name\n          }))\n        })\n      });\n      if (!finalizeResponse.ok) throw new Error(\"Failed to finalize upload\");\n      const result = await finalizeResponse.json();\n      console.log(\"Upload finalized:\", result);\n      setUploadStatus(prevStatus => ({\n        ...prevStatus,\n        uploaded: true,\n        analyzed: false,\n        message: result.message,\n        analysisResults: []\n      }));\n      setIsUploading(false);\n      setIsAnalyzing(true);\n      alert(\"Upload berhasil! Now starting analysis...\");\n\n      // Start analyzing files with Gemini after upload completes\n      await analyzeFilesWithGemini(result.saved_files, result.folder);\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      setUploadStatus({\n        uploaded: false,\n        analyzed: false,\n        message: error.message\n      });\n      alert(\"Terjadi kesalahan saat mengupload file.\");\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  const downloadAnalysis = filename => {\n    // Fungsi untuk mendownload file hasil analisis\n    const url = `http://localhost:5000/download-analysis?filename=${filename}`;\n    window.open(url, \"_blank\"); // Membuka file di tab baru untuk di-download\n  };\n\n  // Recursive component to render folder structure\n  const FolderTree = ({\n    items\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"folder-tree\",\n      children: items.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: item.isDirectory ? \"folder-item\" : \"file-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-name\",\n          children: [item.isDirectory ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"folder-icon\",\n            children: [\"\\uD83D\\uDCC1 \", item.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-icon\",\n            children: [\"\\uD83D\\uDCC4 \", item.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 17\n          }, this), isUploading && fileProgress[item.name] !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"progress-indicator\",\n            children: [\"Uploading: \", fileProgress[item.name], \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 17\n          }, this), isAnalyzing && analysisProgress[item.name] !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"progress-indicator\",\n            children: \"Analyzing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 17\n          }, this), uploadStatus.analyzed && uploadStatus.analysisResults.includes(item.name) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => downloadAnalysis(item.name),\n            className: \"download-button\",\n            children: \"View Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this), item.isDirectory && item.children && item.children.length > 0 && /*#__PURE__*/_jsxDEV(FolderTree, {\n          items: item.children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-homepage\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: \"HauntAI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload File or Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"upload-limit\",\n        children: \"Maksimum ukuran file: 1GB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-options\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-box\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `upload-label ${folderUploaded ? \"disabled\" : \"\"}`,\n            children: [\"Upload File\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              multiple: true,\n              onChange: handleFileUpload,\n              disabled: folderUploaded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-box\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `upload-label ${fileUploaded ? \"disabled\" : \"\"}`,\n            children: [\"Upload Folder\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              webkitdirectory: \"\",\n              directory: \"\",\n              multiple: true,\n              onChange: handleFolderUpload,\n              disabled: fileUploaded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upload-button\",\n        onClick: handleUploadToBackend,\n        disabled: isUploading || isAnalyzing,\n        children: isUploading ? \"Uploading...\" : isAnalyzing ? \"Analyzing with AI...\" : \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), folderUploaded && folderStructure.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Struktur Folder:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FolderTree, {\n        items: folderStructure\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 9\n    }, this), fileUploaded && selectedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File yang Akan Diupload:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"file-list\",\n        children: selectedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"file-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-icon\",\n            children: [\"\\uD83D\\uDCC4 \", file.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 17\n          }, this), isUploading && fileProgress[file.name] !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"progress-indicator\",\n            children: [\"Uploading: \", fileProgress[file.name], \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 19\n          }, this), isAnalyzing && analysisProgress[file.name] !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"progress-indicator\",\n            children: \"Analyzing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 19\n          }, this), uploadStatus.analyzed && uploadStatus.analysisResults.includes(file.name) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => downloadAnalysis(file.name),\n            className: \"download-button\",\n            children: \"View Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"QwcFNS6Pl0Be1rHfPF48HUiBPC4=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","HomePage","_s","fileUploaded","setFileUploaded","folderUploaded","setFolderUploaded","folderStructure","setFolderStructure","selectedFiles","setSelectedFiles","uploadStatus","setUploadStatus","uploaded","analyzed","message","analysisResults","isUploading","setIsUploading","isAnalyzing","setIsAnalyzing","fileProgress","setFileProgress","analysisProgress","setAnalysisProgress","CHUNK_SIZE","handleFileUpload","event","files","target","length","Array","from","console","log","processEntries","entry","path","items","isFile","Promise","resolve","file","fileWithPath","Object","assign","webkitRelativePath","name","fullPath","push","isDirectory","dirReader","createReader","newPath","dirEntry","children","readEntries","entries","childEntry","childItems","handleFolderUpload","dataTransfer","rootEntry","webkitGetAsEntry","structure","allFiles","extractFilesFromStructure","createFolderStructureFromFiles","fileList","filter","endsWith","warn","alert","root","pathParts","split","currentLevel","i","folderName","folderFound","child","newFolder","slice","join","traverse","item","uploadChunk","start","chunk","sessionId","formData","FormData","append","size","response","fetch","method","body","ok","Error","statusText","result","json","progress","Math","min","round","prevProgress","analyzeFilesWithGemini","savedFiles","uploadFolder","initialProgress","forEach","filePath","fileName","pop","analysisResponse","headers","JSON","stringify","folder","analysisPrompt","analysisResult","prev","analyzed_files","error","handleUploadToBackend","Date","now","toString","finalizeResponse","map","f","filename","filepath","prevStatus","saved_files","downloadAnalysis","url","window","open","FolderTree","className","index","_jsxFileName","lineNumber","columnNumber","undefined","includes","onClick","type","multiple","onChange","disabled","webkitdirectory","directory","_c","$RefreshReg$"],"sources":["C:/Users/flore/OneDrive/Dokumen/GitHub/HauntAI/client/src/pages/HomePage/Homepage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Homepage.css\";\r\n\r\nexport default function HomePage() {\r\n  const [fileUploaded, setFileUploaded] = useState(false);\r\n  const [folderUploaded, setFolderUploaded] = useState(false);\r\n  const [folderStructure, setFolderStructure] = useState([]); // Store full folder structure\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [uploadStatus, setUploadStatus] = useState({\r\n    uploaded: false,\r\n    analyzed: false,\r\n    message: \"\",\r\n    analysisResults: [],\r\n  });\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n  const [fileProgress, setFileProgress] = useState({});\r\n  const [analysisProgress, setAnalysisProgress] = useState({});\r\n\r\n  const CHUNK_SIZE = 1024 * 1024 * 500; // 500MB\r\n\r\n  const handleFileUpload = (event) => {\r\n    const files = event.target.files;\r\n    if (files.length > 0) {\r\n      setSelectedFiles(Array.from(files));\r\n      setFileUploaded(true);\r\n      setFolderUploaded(false);\r\n      setFolderStructure([]); // Clear folder structure\r\n      console.log(`Selected ${files.length} files for upload`);\r\n    }\r\n  };\r\n\r\n  // Process folder structure from DataTransferItemList\r\n  const processEntries = async (entry, path = \"\") => {\r\n    const items = [];\r\n    \r\n    if (entry.isFile) {\r\n      return new Promise((resolve) => {\r\n        entry.file(file => {\r\n          // Create a new file object with the path information\r\n          const fileWithPath = Object.assign(file, {\r\n            webkitRelativePath: path + file.name,\r\n            fullPath: path + file.name,\r\n            isFile: true\r\n          });\r\n          items.push(fileWithPath);\r\n          resolve(items);\r\n        });\r\n      });\r\n    } else if (entry.isDirectory) {\r\n      const dirReader = entry.createReader();\r\n      const newPath = path + entry.name + \"/\";\r\n      \r\n      // Create a directory entry object\r\n      const dirEntry = {\r\n        name: entry.name,\r\n        fullPath: newPath,\r\n        isDirectory: true,\r\n        children: []\r\n      };\r\n      \r\n      items.push(dirEntry);\r\n      \r\n      return new Promise((resolve) => {\r\n        const readEntries = () => {\r\n          dirReader.readEntries(async (entries) => {\r\n            if (entries.length === 0) {\r\n              resolve(items);\r\n            } else {\r\n              for (const childEntry of entries) {\r\n                const childItems = await processEntries(childEntry, newPath);\r\n                \r\n                // If this is a directory, add its children to the directory entry\r\n                if (childEntry.isDirectory) {\r\n                  dirEntry.children.push(...childItems);\r\n                } else {\r\n                  // If it's a file, add it to our items array\r\n                  items.push(...childItems);\r\n                }\r\n              }\r\n              readEntries(); // Continue reading until all entries are processed\r\n            }\r\n          });\r\n        };\r\n        readEntries();\r\n      });\r\n    }\r\n    \r\n    return items;\r\n  };\r\n\r\n  const handleFolderUpload = async (event) => {\r\n    if (!event.target.files || event.target.files.length === 0) return;\r\n    \r\n    // Get the DataTransferItems from the input\r\n    const items = event.dataTransfer ? event.dataTransfer.items : null;\r\n    \r\n    if (items && items.length > 0) {\r\n      // Using the modern DataTransferItem API to get folder structure\r\n      setIsUploading(true);\r\n      const rootEntry = items[0].webkitGetAsEntry();\r\n      \r\n      if (rootEntry) {\r\n        const structure = await processEntries(rootEntry);\r\n        console.log(\"Folder structure:\", structure);\r\n        \r\n        // Extract all files from the structure\r\n        const allFiles = extractFilesFromStructure(structure);\r\n        console.log(\"All files:\", allFiles);\r\n        \r\n        setFolderStructure(structure);\r\n        setSelectedFiles(allFiles);\r\n        setFolderUploaded(true);\r\n        setFileUploaded(false);\r\n      }\r\n      setIsUploading(false);\r\n    } else {\r\n      // Fallback for older browsers or when drag-and-drop is not used\r\n      const files = Array.from(event.target.files);\r\n      \r\n      // Create folder structure from webkitRelativePath\r\n      const structure = createFolderStructureFromFiles(files);\r\n      console.log(\"Created folder structure:\", structure);\r\n      \r\n      // Filter files to only include .js or .py files\r\n      const fileList = files.filter(file => \r\n        file.name.endsWith(\".js\") || file.name.endsWith(\".py\")\r\n      );\r\n      \r\n      if (fileList.length > 0) {\r\n        setSelectedFiles(fileList);\r\n        setFolderStructure(structure);\r\n        setFolderUploaded(true);\r\n        setFileUploaded(false);\r\n        console.log(`Selected ${fileList.length} files from folder`);\r\n      } else {\r\n        console.warn(\"No .js or .py files found in folder\");\r\n        alert(\"Tidak ada file dengan ekstensi .js atau .py yang ditemukan.\");\r\n        setFolderUploaded(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Helper function to create folder structure from file list (using webkitRelativePath)\r\n  const createFolderStructureFromFiles = (files) => {\r\n    const root = { name: \"root\", isDirectory: true, children: [] };\r\n    \r\n    for (const file of files) {\r\n      if (!file.webkitRelativePath) continue;\r\n      \r\n      const pathParts = file.webkitRelativePath.split('/');\r\n      let currentLevel = root;\r\n      \r\n      // Process directories in the path\r\n      for (let i = 0; i < pathParts.length - 1; i++) {\r\n        const folderName = pathParts[i];\r\n        let folderFound = false;\r\n        \r\n        // Check if the folder already exists at this level\r\n        for (const child of currentLevel.children) {\r\n          if (child.isDirectory && child.name === folderName) {\r\n            currentLevel = child;\r\n            folderFound = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // If folder doesn't exist, create it\r\n        if (!folderFound) {\r\n          const newFolder = {\r\n            name: folderName,\r\n            isDirectory: true,\r\n            fullPath: pathParts.slice(0, i + 1).join('/') + '/',\r\n            children: []\r\n          };\r\n          currentLevel.children.push(newFolder);\r\n          currentLevel = newFolder;\r\n        }\r\n      }\r\n      \r\n      // Add the file to the current directory level\r\n      currentLevel.children.push({\r\n        name: file.name,\r\n        fullPath: file.webkitRelativePath,\r\n        isFile: true,\r\n        file: file\r\n      });\r\n    }\r\n    \r\n    // Return children of root (skip the artificial root node)\r\n    return root.children;\r\n  };\r\n\r\n  // Helper function to extract all file objects from structure\r\n  const extractFilesFromStructure = (structure) => {\r\n    const files = [];\r\n    \r\n    const traverse = (items) => {\r\n      for (const item of items) {\r\n        if (item.isFile) {\r\n          files.push(item);\r\n        } else if (item.isDirectory && item.children) {\r\n          traverse(item.children);\r\n        }\r\n      }\r\n    };\r\n    \r\n    traverse(structure);\r\n    return files;\r\n  };\r\n\r\n  const uploadChunk = async (file, start, chunk, sessionId) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", chunk);\r\n    formData.append(\"sessionId\", sessionId);\r\n    formData.append(\"start\", start);\r\n    formData.append(\"total_size\", file.size);\r\n    formData.append(\"filename\", file.name);\r\n    // Add path information for folder structure\r\n    if (file.fullPath) {\r\n      formData.append(\"filepath\", file.fullPath);\r\n    }\r\n\r\n    console.log(`Uploading chunk for ${file.name}: ${start}-${start + chunk.size} of ${file.size}`);\r\n\r\n    const response = await fetch(\"http://localhost:5000/upload-chunk\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Upload chunk failed: ${response.statusText}`);\r\n    }\r\n    const result = await response.json();\r\n    console.log(`Chunk upload response:`, result);\r\n\r\n    // Update progress for this specific file\r\n    const progress = Math.min(Math.round((start + chunk.size) / file.size * 100), 100);\r\n    setFileProgress((prevProgress) => ({\r\n      ...prevProgress,\r\n      [file.name]: progress, // Update progress for this file\r\n    }));\r\n\r\n    return result;\r\n  };\r\n\r\n  // Function to analyze files with Gemini API\r\n  const analyzeFilesWithGemini = async (savedFiles, uploadFolder) => {\r\n    setIsAnalyzing(true);\r\n    console.log(\"Starting Gemini analysis for files:\", savedFiles);\r\n    \r\n    try {\r\n      // Initialize analysis progress for each file\r\n      const initialProgress = {};\r\n      savedFiles.forEach(filePath => {\r\n        const fileName = filePath.split('/').pop();\r\n        initialProgress[fileName] = 0;\r\n      });\r\n      setAnalysisProgress(initialProgress);\r\n      \r\n      // Send request to analyze files\r\n      const analysisResponse = await fetch(\"http://localhost:5000/analyze-files\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          files: savedFiles,\r\n          folder: uploadFolder,\r\n          analysisPrompt: \"Analyze this code and identify any security vulnerabilities, hardcoded credentials, or sensitive data. Also suggest improvements for code quality and performance. Structure your response with clear sections for issues found and recommendations.\",\r\n        }),\r\n      });\r\n\r\n      if (!analysisResponse.ok) {\r\n        throw new Error(\"Failed to analyze files with Gemini API\");\r\n      }\r\n\r\n      const analysisResult = await analysisResponse.json();\r\n      console.log(\"Analysis completed:\", analysisResult);\r\n\r\n      setUploadStatus(prev => ({\r\n        ...prev,\r\n        analyzed: true,\r\n        analysisResults: analysisResult.analyzed_files || [],\r\n      }));\r\n\r\n      alert(\"Analysis complete! You can now view the results.\");\r\n    } catch (error) {\r\n      console.error(\"Analysis error:\", error);\r\n      alert(\"Error analyzing files: \" + error.message);\r\n    } finally {\r\n      setIsAnalyzing(false);\r\n    }\r\n  };\r\n\r\n  const handleUploadToBackend = async () => {\r\n    if (selectedFiles.length === 0) {\r\n      console.warn(\"No files selected for upload\");\r\n      alert(\"Tidak ada file yang dipilih.\");\r\n      return;\r\n    }\r\n\r\n    setIsUploading(true);\r\n    const sessionId = Date.now().toString();\r\n    console.log(`Starting upload session: ${sessionId}`);\r\n\r\n    try {\r\n      for (const file of selectedFiles) {\r\n        console.log(`Processing file: ${file.name} (${file.size} bytes)`);\r\n        let start = 0;\r\n        while (start < file.size) {\r\n          const chunk = file.slice(start, start + CHUNK_SIZE);\r\n          await uploadChunk(file, start, chunk, sessionId);\r\n          start += CHUNK_SIZE;\r\n        }\r\n        // Once the file is uploaded, update progress to 100%\r\n        setFileProgress((prevProgress) => ({\r\n          ...prevProgress,\r\n          [file.name]: 100,\r\n        }));\r\n        console.log(`Completed uploading file: ${file.name}`);\r\n      }\r\n\r\n      console.log(\"All files uploaded, finalizing...\");\r\n      const finalizeResponse = await fetch(\"http://localhost:5000/finalize-upload\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          sessionId,\r\n          files: selectedFiles.map(f => ({\r\n            filename: f.name,\r\n            size: f.size,\r\n            filepath: f.fullPath || f.webkitRelativePath || f.name,\r\n          })),\r\n        }),\r\n      });\r\n\r\n      if (!finalizeResponse.ok) throw new Error(\"Failed to finalize upload\");\r\n\r\n      const result = await finalizeResponse.json();\r\n      console.log(\"Upload finalized:\", result);\r\n\r\n      setUploadStatus(prevStatus => ({\r\n        ...prevStatus,\r\n        uploaded: true,\r\n        analyzed: false,\r\n        message: result.message,\r\n        analysisResults: [],\r\n      }));\r\n      \r\n      setIsUploading(false);\r\n      setIsAnalyzing(true);\r\n      \r\n      alert(\"Upload berhasil! Now starting analysis...\");\r\n      \r\n      // Start analyzing files with Gemini after upload completes\r\n      await analyzeFilesWithGemini(result.saved_files, result.folder);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      setUploadStatus({\r\n        uploaded: false,\r\n        analyzed: false,\r\n        message: error.message,\r\n      });\r\n      alert(\"Terjadi kesalahan saat mengupload file.\");\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  const downloadAnalysis = (filename) => {\r\n    // Fungsi untuk mendownload file hasil analisis\r\n    const url = `http://localhost:5000/download-analysis?filename=${filename}`;\r\n    window.open(url, \"_blank\"); // Membuka file di tab baru untuk di-download\r\n  };\r\n\r\n  // Recursive component to render folder structure\r\n  const FolderTree = ({ items }) => {\r\n    return (\r\n      <ul className=\"folder-tree\">\r\n        {items.map((item, index) => (\r\n          <li key={index} className={item.isDirectory ? \"folder-item\" : \"file-item\"}>\r\n            <div className=\"item-name\">\r\n              {item.isDirectory ? (\r\n                <span className=\"folder-icon\">📁 {item.name}</span>\r\n              ) : (\r\n                <span className=\"file-icon\">📄 {item.name}</span>\r\n              )}\r\n              \r\n              {isUploading && fileProgress[item.name] !== undefined && (\r\n                <span className=\"progress-indicator\">\r\n                  Uploading: {fileProgress[item.name]}%\r\n                </span>\r\n              )}\r\n              \r\n              {isAnalyzing && analysisProgress[item.name] !== undefined && (\r\n                <span className=\"progress-indicator\">\r\n                  Analyzing...\r\n                </span>\r\n              )}\r\n              \r\n              {uploadStatus.analyzed && uploadStatus.analysisResults.includes(item.name) && (\r\n                <button onClick={() => downloadAnalysis(item.name)} className=\"download-button\">\r\n                  View Analysis\r\n                </button>\r\n              )}\r\n            </div>\r\n            \r\n            {item.isDirectory && item.children && item.children.length > 0 && (\r\n              <FolderTree items={item.children} />\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-homepage\">\r\n      <nav className=\"navbar\">HauntAI</nav>\r\n      <div className=\"upload-container\">\r\n        <h2>Upload File or Folder</h2>\r\n        <p className=\"upload-limit\">Maksimum ukuran file: 1GB</p>\r\n        <div className=\"upload-options\">\r\n          <div className=\"upload-box\">\r\n            <label className={`upload-label ${folderUploaded ? \"disabled\" : \"\"}`} >\r\n              Upload File\r\n              <input type=\"file\" multiple onChange={handleFileUpload} disabled={folderUploaded} />\r\n            </label>\r\n          </div>\r\n          <div className=\"upload-box\">\r\n            <label className={`upload-label ${fileUploaded ? \"disabled\" : \"\"}`} >\r\n              Upload Folder\r\n              <input \r\n                type=\"file\" \r\n                webkitdirectory=\"\" \r\n                directory=\"\" \r\n                multiple \r\n                onChange={handleFolderUpload} \r\n                disabled={fileUploaded} \r\n              />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <button \r\n          className=\"upload-button\" \r\n          onClick={handleUploadToBackend} \r\n          disabled={isUploading || isAnalyzing}\r\n        >\r\n          {isUploading ? \"Uploading...\" : isAnalyzing ? \"Analyzing with AI...\" : \"Upload\"}\r\n        </button>\r\n      </div>\r\n\r\n      {/* Show folder structure when folder is uploaded */}\r\n      {folderUploaded && folderStructure.length > 0 && (\r\n        <div className=\"folder-content-container\">\r\n          <h3>Struktur Folder:</h3>\r\n          <FolderTree items={folderStructure} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Show flat file list when individual files are uploaded */}\r\n      {fileUploaded && selectedFiles.length > 0 && (\r\n        <div className=\"folder-content-container\">\r\n          <h3>File yang Akan Diupload:</h3>\r\n          <ul className=\"file-list\">\r\n            {selectedFiles.map((file, index) => (\r\n              <li key={index} className=\"file-item\">\r\n                <span className=\"file-icon\">📄 {file.name}</span>\r\n                {isUploading && fileProgress[file.name] !== undefined && (\r\n                  <span className=\"progress-indicator\">\r\n                    Uploading: {fileProgress[file.name]}%\r\n                  </span>\r\n                )}\r\n                {isAnalyzing && analysisProgress[file.name] !== undefined && (\r\n                  <span className=\"progress-indicator\">\r\n                    Analyzing...\r\n                  </span>\r\n                )}\r\n                {uploadStatus.analyzed && uploadStatus.analysisResults.includes(file.name) && (\r\n                  <button onClick={() => downloadAnalysis(file.name)} className=\"download-button\">\r\n                    View Analysis\r\n                  </button>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}