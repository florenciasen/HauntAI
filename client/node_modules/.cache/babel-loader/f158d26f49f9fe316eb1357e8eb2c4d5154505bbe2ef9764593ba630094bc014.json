{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flore\\\\OneDrive\\\\Dokumen\\\\GitHub\\\\HauntAI\\\\client\\\\src\\\\pages\\\\HomePage\\\\Homepage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Homepage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s();\n  const [fileUploaded, setFileUploaded] = useState(false);\n  const [folderUploaded, setFolderUploaded] = useState(false);\n  const [folderContents, setFolderContents] = useState([]);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadStatus, setUploadStatus] = useState({\n    uploaded: false,\n    analyzed: false,\n    message: \"\",\n    analysisResults: [] // Menyimpan hasil analisis\n  });\n  const [isUploading, setIsUploading] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false); // Track analysis status\n  const [fileProgress, setFileProgress] = useState({}); // Track progress per file\n  const [analysisProgress, setAnalysisProgress] = useState({}); // Track analysis progress\n\n  const CHUNK_SIZE = 1024 * 1024 * 500; // 500MB\n\n  const handleFileUpload = event => {\n    const files = event.target.files;\n    if (files.length > 0) {\n      setSelectedFiles(Array.from(files));\n      setFileUploaded(true);\n      setFolderUploaded(false);\n      console.log(`Selected ${files.length} files for upload`);\n    }\n  };\n  const handleFolderUpload = event => {\n    const files = event.target.files;\n    let fileList = [];\n    let fileCount = {}; // Objek untuk menyimpan jumlah file dengan nama yang sama\n\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].name.endsWith(\".js\") || files[i].name.endsWith(\".py\")) {\n        let originalPath = files[i].webkitRelativePath || files[i].name;\n        let newPath = originalPath;\n\n        // Jika ada file dengan nama yang sama, tambahkan angka agar unik\n        if (fileCount[originalPath]) {\n          let count = fileCount[originalPath]++;\n          let pathParts = originalPath.split(\"/\"); // Pisahkan folder & nama file\n          let fileName = pathParts.pop(); // Ambil nama file terakhir\n          let nameParts = fileName.split(\".\"); // Pisahkan nama file dan ekstensi\n          let newFileName = `${nameParts[0]}(${count}).${nameParts.slice(1).join(\".\")}`;\n          pathParts.push(newFileName); // Gabungkan kembali dengan nama baru\n          newPath = pathParts.join(\"/\"); // Buat path baru yang unik\n        } else {\n          fileCount[originalPath] = 1; // Set pertama kali file muncul\n        }\n        fileList.push({\n          file: files[i],\n          relativePath: newPath\n        }); // Simpan file dengan path unik\n      }\n    }\n    if (fileList.length > 0) {\n      setSelectedFiles(fileList);\n      setFolderUploaded(true);\n      setFileUploaded(false);\n      setFolderContents(fileList.map(file => file.relativePath));\n      console.log(`Selected ${fileList.length} files from folder`, fileList);\n    } else {\n      console.warn(\"No .js or .py files found in folder\");\n      alert(\"Tidak ada file dengan ekstensi .js atau .py yang ditemukan.\");\n      setFolderUploaded(false);\n    }\n  };\n  const uploadChunk = async (file, start, chunk, sessionId) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk);\n    formData.append(\"sessionId\", sessionId);\n    formData.append(\"start\", start);\n    formData.append(\"total_size\", file.size);\n    formData.append(\"filename\", file.name);\n    console.log(`Uploading chunk for ${file.name}: ${start}-${start + chunk.size} of ${file.size}`);\n    const response = await fetch(\"http://localhost:5000/upload-chunk\", {\n      method: \"POST\",\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Upload chunk failed: ${response.statusText}`);\n    }\n    const result = await response.json();\n    console.log(`Chunk upload response:`, result);\n\n    // Update progress for this specific file\n    const progress = Math.min(Math.round((start + chunk.size) / file.size * 100), 100);\n    setFileProgress(prevProgress => ({\n      ...prevProgress,\n      [file.name]: progress // Update progress for this file\n    }));\n    return result;\n  };\n\n  // Function to analyze files with Gemini API\n  const analyzeFilesWithGemini = async (savedFiles, uploadFolder) => {\n    setIsAnalyzing(true);\n    console.log(\"Starting Gemini analysis for files:\", savedFiles);\n    try {\n      // Initialize analysis progress for each file\n      const initialProgress = {};\n      savedFiles.forEach(filePath => {\n        const fileName = filePath.split('/').pop();\n        initialProgress[fileName] = 0;\n      });\n      setAnalysisProgress(initialProgress);\n\n      // Send request to analyze files\n      const analysisResponse = await fetch(\"http://localhost:5000/analyze-files\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          files: savedFiles,\n          folder: uploadFolder,\n          analysisPrompt: \"Analyze this code and identify any security vulnerabilities, hardcoded credentials, or sensitive data. Also suggest improvements for code quality and performance. Structure your response with clear sections for issues found and recommendations.\"\n        })\n      });\n      if (!analysisResponse.ok) {\n        throw new Error(\"Failed to analyze files with Gemini API\");\n      }\n      const analysisResult = await analysisResponse.json();\n      console.log(\"Analysis completed:\", analysisResult);\n      setUploadStatus(prev => ({\n        ...prev,\n        analyzed: true,\n        analysisResults: analysisResult.analyzed_files || []\n      }));\n      alert(\"Analysis complete! You can now view the results.\");\n    } catch (error) {\n      console.error(\"Analysis error:\", error);\n      alert(\"Error analyzing files: \" + error.message);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  const handleUploadToBackend = async () => {\n    if (selectedFiles.length === 0) {\n      console.warn(\"No files selected for upload\");\n      alert(\"Tidak ada file yang dipilih.\");\n      return;\n    }\n    setIsUploading(true);\n    const sessionId = Date.now().toString();\n    console.log(`Starting upload session: ${sessionId}`);\n    try {\n      for (const file of selectedFiles) {\n        console.log(`Processing file: ${file.name} (${file.size} bytes)`);\n        let start = 0;\n        while (start < file.size) {\n          const chunk = file.slice(start, start + CHUNK_SIZE);\n          await uploadChunk(file, start, chunk, sessionId);\n          start += CHUNK_SIZE;\n        }\n        // Once the file is uploaded, update progress to 100%\n        setFileProgress(prevProgress => ({\n          ...prevProgress,\n          [file.name]: 100\n        }));\n        console.log(`Completed uploading file: ${file.name}`);\n      }\n      console.log(\"All files uploaded, finalizing...\");\n      const finalizeResponse = await fetch(\"http://localhost:5000/finalize-upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          files: selectedFiles.map(f => ({\n            filename: f.name,\n            size: f.size\n          }))\n        })\n      });\n      if (!finalizeResponse.ok) throw new Error(\"Failed to finalize upload\");\n      const result = await finalizeResponse.json();\n      console.log(\"Upload finalized:\", result);\n      setUploadStatus(prevStatus => ({\n        ...prevStatus,\n        uploaded: true,\n        analyzed: false,\n        message: result.message,\n        analysisResults: []\n      }));\n      setIsUploading(false); // Pastikan upload status dihentikan\n      setIsAnalyzing(true); // Set analyzing status\n\n      alert(\"Upload berhasil! Now starting analysis...\");\n\n      // Start analyzing files with Gemini after upload completes\n      await analyzeFilesWithGemini(result.saved_files, result.folder);\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      setUploadStatus({\n        uploaded: false,\n        analyzed: false,\n        message: error.message\n      });\n      alert(\"Terjadi kesalahan saat mengupload file.\");\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  const downloadAnalysis = filename => {\n    // Fungsi untuk mendownload file hasil analisis\n    const url = `http://localhost:5000/download-analysis?filename=${filename}`;\n    window.open(url, \"_blank\"); // Membuka file di tab baru untuk di-download\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-homepage\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: \"HauntAI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload File or Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"upload-limit\",\n        children: \"Maksimum ukuran file: 1GB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-options\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-box\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `upload-label ${folderUploaded ? \"disabled\" : \"\"}`,\n            children: [\"Upload File\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              multiple: true,\n              onChange: handleFileUpload,\n              disabled: folderUploaded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-box\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `upload-label ${fileUploaded ? \"disabled\" : \"\"}`,\n            children: [\"Upload Folder\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              webkitdirectory: \"\",\n              directory: \"\",\n              multiple: true,\n              onChange: handleFolderUpload,\n              disabled: fileUploaded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upload-button\",\n        onClick: handleUploadToBackend,\n        disabled: isUploading || isAnalyzing,\n        children: isUploading ? \"Uploading...\" : isAnalyzing ? \"Analyzing with AI...\" : \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), selectedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File yang Akan Diupload:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, isUploading && fileProgress[file.name] !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: \"10px\",\n              fontSize: \"12px\"\n            },\n            children: [\"Uploading: \", fileProgress[file.name], \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 19\n          }, this), isAnalyzing && analysisProgress[file.name] !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: \"10px\",\n              fontSize: \"12px\"\n            },\n            children: \"Analyzing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 19\n          }, this), uploadStatus.analyzed && uploadStatus.analysisResults.includes(file.name) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => downloadAnalysis(file.name),\n            className: \"download-button\",\n            children: \"Klik to View\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"4ZBrMt5cVGmzmrU61PFBP6pZxtM=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","HomePage","_s","fileUploaded","setFileUploaded","folderUploaded","setFolderUploaded","folderContents","setFolderContents","selectedFiles","setSelectedFiles","uploadStatus","setUploadStatus","uploaded","analyzed","message","analysisResults","isUploading","setIsUploading","isAnalyzing","setIsAnalyzing","fileProgress","setFileProgress","analysisProgress","setAnalysisProgress","CHUNK_SIZE","handleFileUpload","event","files","target","length","Array","from","console","log","handleFolderUpload","fileList","fileCount","i","name","endsWith","originalPath","webkitRelativePath","newPath","count","pathParts","split","fileName","pop","nameParts","newFileName","slice","join","push","file","relativePath","map","warn","alert","uploadChunk","start","chunk","sessionId","formData","FormData","append","size","response","fetch","method","body","ok","Error","statusText","result","json","progress","Math","min","round","prevProgress","analyzeFilesWithGemini","savedFiles","uploadFolder","initialProgress","forEach","filePath","analysisResponse","headers","JSON","stringify","folder","analysisPrompt","analysisResult","prev","analyzed_files","error","handleUploadToBackend","Date","now","toString","finalizeResponse","f","filename","prevStatus","saved_files","downloadAnalysis","url","window","open","className","children","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","disabled","webkitdirectory","directory","onClick","index","undefined","style","marginLeft","fontSize","includes","_c","$RefreshReg$"],"sources":["C:/Users/flore/OneDrive/Dokumen/GitHub/HauntAI/client/src/pages/HomePage/Homepage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Homepage.css\";\r\n\r\nexport default function HomePage() {\r\n  const [fileUploaded, setFileUploaded] = useState(false);\r\n  const [folderUploaded, setFolderUploaded] = useState(false);\r\n  const [folderContents, setFolderContents] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [uploadStatus, setUploadStatus] = useState({\r\n    uploaded: false,\r\n    analyzed: false,\r\n    message: \"\",\r\n    analysisResults: [], // Menyimpan hasil analisis\r\n  });\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false); // Track analysis status\r\n  const [fileProgress, setFileProgress] = useState({}); // Track progress per file\r\n  const [analysisProgress, setAnalysisProgress] = useState({}); // Track analysis progress\r\n\r\n  const CHUNK_SIZE = 1024 * 1024 * 500; // 500MB\r\n\r\n  const handleFileUpload = (event) => {\r\n    const files = event.target.files;\r\n    if (files.length > 0) {\r\n      setSelectedFiles(Array.from(files));\r\n      setFileUploaded(true);\r\n      setFolderUploaded(false);\r\n      console.log(`Selected ${files.length} files for upload`);\r\n    }\r\n  };\r\n\r\n  const handleFolderUpload = (event) => {\r\n    const files = event.target.files;\r\n    let fileList = [];\r\n    let fileCount = {}; // Objek untuk menyimpan jumlah file dengan nama yang sama\r\n  \r\n    for (let i = 0; i < files.length; i++) {\r\n      if (files[i].name.endsWith(\".js\") || files[i].name.endsWith(\".py\")) {\r\n        let originalPath = files[i].webkitRelativePath || files[i].name;\r\n        let newPath = originalPath; \r\n  \r\n        // Jika ada file dengan nama yang sama, tambahkan angka agar unik\r\n        if (fileCount[originalPath]) {\r\n          let count = fileCount[originalPath]++;\r\n          let pathParts = originalPath.split(\"/\"); // Pisahkan folder & nama file\r\n          let fileName = pathParts.pop(); // Ambil nama file terakhir\r\n          let nameParts = fileName.split(\".\"); // Pisahkan nama file dan ekstensi\r\n          let newFileName = `${nameParts[0]}(${count}).${nameParts.slice(1).join(\".\")}`;\r\n          \r\n          pathParts.push(newFileName); // Gabungkan kembali dengan nama baru\r\n          newPath = pathParts.join(\"/\"); // Buat path baru yang unik\r\n  \r\n        } else {\r\n          fileCount[originalPath] = 1; // Set pertama kali file muncul\r\n        }\r\n  \r\n        fileList.push({ file: files[i], relativePath: newPath }); // Simpan file dengan path unik\r\n      }\r\n    }\r\n  \r\n    if (fileList.length > 0) {\r\n      setSelectedFiles(fileList);\r\n      setFolderUploaded(true);\r\n      setFileUploaded(false);\r\n      setFolderContents(fileList.map(file => file.relativePath));\r\n      console.log(`Selected ${fileList.length} files from folder`, fileList);\r\n    } else {\r\n      console.warn(\"No .js or .py files found in folder\");\r\n      alert(\"Tidak ada file dengan ekstensi .js atau .py yang ditemukan.\");\r\n      setFolderUploaded(false);\r\n    }\r\n  };\r\n\r\n  const uploadChunk = async (file, start, chunk, sessionId) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", chunk);\r\n    formData.append(\"sessionId\", sessionId);\r\n    formData.append(\"start\", start);\r\n    formData.append(\"total_size\", file.size);\r\n    formData.append(\"filename\", file.name);\r\n\r\n    console.log(`Uploading chunk for ${file.name}: ${start}-${start + chunk.size} of ${file.size}`);\r\n\r\n    const response = await fetch(\"http://localhost:5000/upload-chunk\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Upload chunk failed: ${response.statusText}`);\r\n    }\r\n    const result = await response.json();\r\n    console.log(`Chunk upload response:`, result);\r\n\r\n    // Update progress for this specific file\r\n    const progress = Math.min(Math.round((start + chunk.size) / file.size * 100), 100);\r\n    setFileProgress((prevProgress) => ({\r\n      ...prevProgress,\r\n      [file.name]: progress, // Update progress for this file\r\n    }));\r\n\r\n    return result;\r\n  };\r\n\r\n  // Function to analyze files with Gemini API\r\n  const analyzeFilesWithGemini = async (savedFiles, uploadFolder) => {\r\n    setIsAnalyzing(true);\r\n    console.log(\"Starting Gemini analysis for files:\", savedFiles);\r\n    \r\n    try {\r\n      // Initialize analysis progress for each file\r\n      const initialProgress = {};\r\n      savedFiles.forEach(filePath => {\r\n        const fileName = filePath.split('/').pop();\r\n        initialProgress[fileName] = 0;\r\n      });\r\n      setAnalysisProgress(initialProgress);\r\n      \r\n      // Send request to analyze files\r\n      const analysisResponse = await fetch(\"http://localhost:5000/analyze-files\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          files: savedFiles,\r\n          folder: uploadFolder,\r\n          analysisPrompt: \"Analyze this code and identify any security vulnerabilities, hardcoded credentials, or sensitive data. Also suggest improvements for code quality and performance. Structure your response with clear sections for issues found and recommendations.\",\r\n        }),\r\n      });\r\n\r\n      if (!analysisResponse.ok) {\r\n        throw new Error(\"Failed to analyze files with Gemini API\");\r\n      }\r\n\r\n      const analysisResult = await analysisResponse.json();\r\n      console.log(\"Analysis completed:\", analysisResult);\r\n\r\n      setUploadStatus(prev => ({\r\n        ...prev,\r\n        analyzed: true,\r\n        analysisResults: analysisResult.analyzed_files || [],\r\n      }));\r\n\r\n      alert(\"Analysis complete! You can now view the results.\");\r\n    } catch (error) {\r\n      console.error(\"Analysis error:\", error);\r\n      alert(\"Error analyzing files: \" + error.message);\r\n    } finally {\r\n      setIsAnalyzing(false);\r\n    }\r\n  };\r\n\r\n  const handleUploadToBackend = async () => {\r\n    if (selectedFiles.length === 0) {\r\n      console.warn(\"No files selected for upload\");\r\n      alert(\"Tidak ada file yang dipilih.\");\r\n      return;\r\n    }\r\n\r\n    setIsUploading(true);\r\n    const sessionId = Date.now().toString();\r\n    console.log(`Starting upload session: ${sessionId}`);\r\n\r\n    try {\r\n      for (const file of selectedFiles) {\r\n        console.log(`Processing file: ${file.name} (${file.size} bytes)`);\r\n        let start = 0;\r\n        while (start < file.size) {\r\n          const chunk = file.slice(start, start + CHUNK_SIZE);\r\n          await uploadChunk(file, start, chunk, sessionId);\r\n          start += CHUNK_SIZE;\r\n        }\r\n        // Once the file is uploaded, update progress to 100%\r\n        setFileProgress((prevProgress) => ({\r\n          ...prevProgress,\r\n          [file.name]: 100,\r\n        }));\r\n        console.log(`Completed uploading file: ${file.name}`);\r\n      }\r\n\r\n      console.log(\"All files uploaded, finalizing...\");\r\n      const finalizeResponse = await fetch(\"http://localhost:5000/finalize-upload\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          sessionId,\r\n          files: selectedFiles.map(f => ({\r\n            filename: f.name,\r\n            size: f.size,\r\n          })),\r\n        }),\r\n      });\r\n\r\n      if (!finalizeResponse.ok) throw new Error(\"Failed to finalize upload\");\r\n\r\n      const result = await finalizeResponse.json();\r\n      console.log(\"Upload finalized:\", result);\r\n\r\n      setUploadStatus(prevStatus => ({\r\n        ...prevStatus,\r\n        uploaded: true,\r\n        analyzed: false,\r\n        message: result.message,\r\n        analysisResults: [],\r\n      }));\r\n      \r\n      setIsUploading(false); // Pastikan upload status dihentikan\r\n      setIsAnalyzing(true); // Set analyzing status\r\n      \r\n      alert(\"Upload berhasil! Now starting analysis...\");\r\n      \r\n      // Start analyzing files with Gemini after upload completes\r\n      await analyzeFilesWithGemini(result.saved_files, result.folder);\r\n      \r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      setUploadStatus({\r\n        uploaded: false,\r\n        analyzed: false,\r\n        message: error.message,\r\n      });\r\n      alert(\"Terjadi kesalahan saat mengupload file.\");\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  const downloadAnalysis = (filename) => {\r\n    // Fungsi untuk mendownload file hasil analisis\r\n    const url = `http://localhost:5000/download-analysis?filename=${filename}`;\r\n    window.open(url, \"_blank\"); // Membuka file di tab baru untuk di-download\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-homepage\">\r\n      <nav className=\"navbar\">HauntAI</nav>\r\n      <div className=\"upload-container\">\r\n        <h2>Upload File or Folder</h2>\r\n        <p className=\"upload-limit\">Maksimum ukuran file: 1GB</p>\r\n        <div className=\"upload-options\">\r\n          <div className=\"upload-box\">\r\n            <label className={`upload-label ${folderUploaded ? \"disabled\" : \"\"}`} >\r\n              Upload File\r\n              <input type=\"file\" multiple onChange={handleFileUpload} disabled={folderUploaded} />\r\n            </label>\r\n          </div>\r\n          <div className=\"upload-box\">\r\n            <label className={`upload-label ${fileUploaded ? \"disabled\" : \"\"}`} >\r\n              Upload Folder\r\n              <input type=\"file\" webkitdirectory=\"\" directory=\"\" multiple onChange={handleFolderUpload} disabled={fileUploaded} />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <button className=\"upload-button\" onClick={handleUploadToBackend} disabled={isUploading || isAnalyzing}>\r\n          {isUploading ? \"Uploading...\" : isAnalyzing ? \"Analyzing with AI...\" : \"Upload\"}\r\n        </button>\r\n      </div>\r\n\r\n      {selectedFiles.length > 0 && (\r\n        <div className=\"folder-content-container\">\r\n          <h3>File yang Akan Diupload:</h3>\r\n          <ul>\r\n            {selectedFiles.map((file, index) => (\r\n              <li key={index}>\r\n                {file.name}\r\n                {isUploading && fileProgress[file.name] !== undefined && (\r\n                  <span style={{ marginLeft: \"10px\", fontSize: \"12px\" }}>\r\n                    Uploading: {fileProgress[file.name]}%\r\n                  </span>\r\n                )}\r\n                {isAnalyzing && analysisProgress[file.name] !== undefined && (\r\n                  <span style={{ marginLeft: \"10px\", fontSize: \"12px\" }}>\r\n                    Analyzing...\r\n                  </span>\r\n                )}\r\n                {/* Tombol Download Hasil Analisis */}\r\n                {uploadStatus.analyzed && uploadStatus.analysisResults.includes(file.name) && (\r\n                  <button onClick={() => downloadAnalysis(file.name)} className=\"download-button\">\r\n                    Klik to View\r\n                  </button>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC;IAC/Ce,QAAQ,EAAE,KAAK;IACfC,QAAQ,EAAE,KAAK;IACfC,OAAO,EAAE,EAAE;IACXC,eAAe,EAAE,EAAE,CAAE;EACvB,CAAC,CAAC;EACF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACvD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACyB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE9D,MAAM2B,UAAU,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;;EAEtC,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChC,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MACpBpB,gBAAgB,CAACqB,KAAK,CAACC,IAAI,CAACJ,KAAK,CAAC,CAAC;MACnCxB,eAAe,CAAC,IAAI,CAAC;MACrBE,iBAAiB,CAAC,KAAK,CAAC;MACxB2B,OAAO,CAACC,GAAG,CAAC,YAAYN,KAAK,CAACE,MAAM,mBAAmB,CAAC;IAC1D;EACF,CAAC;EAED,MAAMK,kBAAkB,GAAIR,KAAK,IAAK;IACpC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChC,IAAIQ,QAAQ,GAAG,EAAE;IACjB,IAAIC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,KAAK,CAACE,MAAM,EAAEQ,CAAC,EAAE,EAAE;MACrC,IAAIV,KAAK,CAACU,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,IAAIZ,KAAK,CAACU,CAAC,CAAC,CAACC,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;QAClE,IAAIC,YAAY,GAAGb,KAAK,CAACU,CAAC,CAAC,CAACI,kBAAkB,IAAId,KAAK,CAACU,CAAC,CAAC,CAACC,IAAI;QAC/D,IAAII,OAAO,GAAGF,YAAY;;QAE1B;QACA,IAAIJ,SAAS,CAACI,YAAY,CAAC,EAAE;UAC3B,IAAIG,KAAK,GAAGP,SAAS,CAACI,YAAY,CAAC,EAAE;UACrC,IAAII,SAAS,GAAGJ,YAAY,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;UACzC,IAAIC,QAAQ,GAAGF,SAAS,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC;UAChC,IAAIC,SAAS,GAAGF,QAAQ,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;UACrC,IAAII,WAAW,GAAG,GAAGD,SAAS,CAAC,CAAC,CAAC,IAAIL,KAAK,KAAKK,SAAS,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;UAE7EP,SAAS,CAACQ,IAAI,CAACH,WAAW,CAAC,CAAC,CAAC;UAC7BP,OAAO,GAAGE,SAAS,CAACO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAEjC,CAAC,MAAM;UACLf,SAAS,CAACI,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/B;QAEAL,QAAQ,CAACiB,IAAI,CAAC;UAAEC,IAAI,EAAE1B,KAAK,CAACU,CAAC,CAAC;UAAEiB,YAAY,EAAEZ;QAAQ,CAAC,CAAC,CAAC,CAAC;MAC5D;IACF;IAEA,IAAIP,QAAQ,CAACN,MAAM,GAAG,CAAC,EAAE;MACvBpB,gBAAgB,CAAC0B,QAAQ,CAAC;MAC1B9B,iBAAiB,CAAC,IAAI,CAAC;MACvBF,eAAe,CAAC,KAAK,CAAC;MACtBI,iBAAiB,CAAC4B,QAAQ,CAACoB,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACC,YAAY,CAAC,CAAC;MAC1DtB,OAAO,CAACC,GAAG,CAAC,YAAYE,QAAQ,CAACN,MAAM,oBAAoB,EAAEM,QAAQ,CAAC;IACxE,CAAC,MAAM;MACLH,OAAO,CAACwB,IAAI,CAAC,qCAAqC,CAAC;MACnDC,KAAK,CAAC,6DAA6D,CAAC;MACpEpD,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,MAAMqD,WAAW,GAAG,MAAAA,CAAOL,IAAI,EAAEM,KAAK,EAAEC,KAAK,EAAEC,SAAS,KAAK;IAC3D,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,KAAK,CAAC;IAC9BE,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEH,SAAS,CAAC;IACvCC,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,KAAK,CAAC;IAC/BG,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEX,IAAI,CAACY,IAAI,CAAC;IACxCH,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEX,IAAI,CAACf,IAAI,CAAC;IAEtCN,OAAO,CAACC,GAAG,CAAC,uBAAuBoB,IAAI,CAACf,IAAI,KAAKqB,KAAK,IAAIA,KAAK,GAAGC,KAAK,CAACK,IAAI,OAAOZ,IAAI,CAACY,IAAI,EAAE,CAAC;IAE/F,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEP;IACR,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwBL,QAAQ,CAACM,UAAU,EAAE,CAAC;IAChE;IACA,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACpC1C,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEwC,MAAM,CAAC;;IAE7C;IACA,MAAME,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAAC,CAACnB,KAAK,GAAGC,KAAK,CAACK,IAAI,IAAIZ,IAAI,CAACY,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC;IAClF5C,eAAe,CAAE0D,YAAY,KAAM;MACjC,GAAGA,YAAY;MACf,CAAC1B,IAAI,CAACf,IAAI,GAAGqC,QAAQ,CAAE;IACzB,CAAC,CAAC,CAAC;IAEH,OAAOF,MAAM;EACf,CAAC;;EAED;EACA,MAAMO,sBAAsB,GAAG,MAAAA,CAAOC,UAAU,EAAEC,YAAY,KAAK;IACjE/D,cAAc,CAAC,IAAI,CAAC;IACpBa,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEgD,UAAU,CAAC;IAE9D,IAAI;MACF;MACA,MAAME,eAAe,GAAG,CAAC,CAAC;MAC1BF,UAAU,CAACG,OAAO,CAACC,QAAQ,IAAI;QAC7B,MAAMvC,QAAQ,GAAGuC,QAAQ,CAACxC,KAAK,CAAC,GAAG,CAAC,CAACE,GAAG,CAAC,CAAC;QAC1CoC,eAAe,CAACrC,QAAQ,CAAC,GAAG,CAAC;MAC/B,CAAC,CAAC;MACFvB,mBAAmB,CAAC4D,eAAe,CAAC;;MAEpC;MACA,MAAMG,gBAAgB,GAAG,MAAMnB,KAAK,CAAC,qCAAqC,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdmB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDlB,IAAI,EAAEmB,IAAI,CAACC,SAAS,CAAC;UACnB9D,KAAK,EAAEsD,UAAU;UACjBS,MAAM,EAAER,YAAY;UACpBS,cAAc,EAAE;QAClB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACL,gBAAgB,CAAChB,EAAE,EAAE;QACxB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;MAC5D;MAEA,MAAMqB,cAAc,GAAG,MAAMN,gBAAgB,CAACZ,IAAI,CAAC,CAAC;MACpD1C,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE2D,cAAc,CAAC;MAElDjF,eAAe,CAACkF,IAAI,KAAK;QACvB,GAAGA,IAAI;QACPhF,QAAQ,EAAE,IAAI;QACdE,eAAe,EAAE6E,cAAc,CAACE,cAAc,IAAI;MACpD,CAAC,CAAC,CAAC;MAEHrC,KAAK,CAAC,kDAAkD,CAAC;IAC3D,CAAC,CAAC,OAAOsC,KAAK,EAAE;MACd/D,OAAO,CAAC+D,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvCtC,KAAK,CAAC,yBAAyB,GAAGsC,KAAK,CAACjF,OAAO,CAAC;IAClD,CAAC,SAAS;MACRK,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,MAAM6E,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAIxF,aAAa,CAACqB,MAAM,KAAK,CAAC,EAAE;MAC9BG,OAAO,CAACwB,IAAI,CAAC,8BAA8B,CAAC;MAC5CC,KAAK,CAAC,8BAA8B,CAAC;MACrC;IACF;IAEAxC,cAAc,CAAC,IAAI,CAAC;IACpB,MAAM4C,SAAS,GAAGoC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IACvCnE,OAAO,CAACC,GAAG,CAAC,4BAA4B4B,SAAS,EAAE,CAAC;IAEpD,IAAI;MACF,KAAK,MAAMR,IAAI,IAAI7C,aAAa,EAAE;QAChCwB,OAAO,CAACC,GAAG,CAAC,oBAAoBoB,IAAI,CAACf,IAAI,KAAKe,IAAI,CAACY,IAAI,SAAS,CAAC;QACjE,IAAIN,KAAK,GAAG,CAAC;QACb,OAAOA,KAAK,GAAGN,IAAI,CAACY,IAAI,EAAE;UACxB,MAAML,KAAK,GAAGP,IAAI,CAACH,KAAK,CAACS,KAAK,EAAEA,KAAK,GAAGnC,UAAU,CAAC;UACnD,MAAMkC,WAAW,CAACL,IAAI,EAAEM,KAAK,EAAEC,KAAK,EAAEC,SAAS,CAAC;UAChDF,KAAK,IAAInC,UAAU;QACrB;QACA;QACAH,eAAe,CAAE0D,YAAY,KAAM;UACjC,GAAGA,YAAY;UACf,CAAC1B,IAAI,CAACf,IAAI,GAAG;QACf,CAAC,CAAC,CAAC;QACHN,OAAO,CAACC,GAAG,CAAC,6BAA6BoB,IAAI,CAACf,IAAI,EAAE,CAAC;MACvD;MAEAN,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,MAAMmE,gBAAgB,GAAG,MAAMjC,KAAK,CAAC,uCAAuC,EAAE;QAC5EC,MAAM,EAAE,MAAM;QACdmB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDlB,IAAI,EAAEmB,IAAI,CAACC,SAAS,CAAC;UACnB5B,SAAS;UACTlC,KAAK,EAAEnB,aAAa,CAAC+C,GAAG,CAAC8C,CAAC,KAAK;YAC7BC,QAAQ,EAAED,CAAC,CAAC/D,IAAI;YAChB2B,IAAI,EAAEoC,CAAC,CAACpC;UACV,CAAC,CAAC;QACJ,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACmC,gBAAgB,CAAC9B,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAEtE,MAAME,MAAM,GAAG,MAAM2B,gBAAgB,CAAC1B,IAAI,CAAC,CAAC;MAC5C1C,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEwC,MAAM,CAAC;MAExC9D,eAAe,CAAC4F,UAAU,KAAK;QAC7B,GAAGA,UAAU;QACb3F,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE2D,MAAM,CAAC3D,OAAO;QACvBC,eAAe,EAAE;MACnB,CAAC,CAAC,CAAC;MAEHE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;MACvBE,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEtBsC,KAAK,CAAC,2CAA2C,CAAC;;MAElD;MACA,MAAMuB,sBAAsB,CAACP,MAAM,CAAC+B,WAAW,EAAE/B,MAAM,CAACiB,MAAM,CAAC;IAEjE,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd/D,OAAO,CAAC+D,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCpF,eAAe,CAAC;QACdC,QAAQ,EAAE,KAAK;QACfC,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAEiF,KAAK,CAACjF;MACjB,CAAC,CAAC;MACF2C,KAAK,CAAC,yCAAyC,CAAC;IAClD,CAAC,SAAS;MACRxC,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EAED,MAAMwF,gBAAgB,GAAIH,QAAQ,IAAK;IACrC;IACA,MAAMI,GAAG,GAAG,oDAAoDJ,QAAQ,EAAE;IAC1EK,MAAM,CAACC,IAAI,CAACF,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,oBACE3G,OAAA;IAAK8G,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjC/G,OAAA;MAAK8G,SAAS,EAAC,QAAQ;MAAAC,QAAA,EAAC;IAAO;MAAAhE,QAAA,EAAAiE,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrClH,OAAA;MAAK8G,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/B/G,OAAA;QAAA+G,QAAA,EAAI;MAAqB;QAAAhE,QAAA,EAAAiE,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BlH,OAAA;QAAG8G,SAAS,EAAC,cAAc;QAAAC,QAAA,EAAC;MAAyB;QAAAhE,QAAA,EAAAiE,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACzDlH,OAAA;QAAK8G,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7B/G,OAAA;UAAK8G,SAAS,EAAC,YAAY;UAAAC,QAAA,eACzB/G,OAAA;YAAO8G,SAAS,EAAE,gBAAgBzG,cAAc,GAAG,UAAU,GAAG,EAAE,EAAG;YAAA0G,QAAA,GAAE,aAErE,eAAA/G,OAAA;cAAOmH,IAAI,EAAC,MAAM;cAACC,QAAQ;cAACC,QAAQ,EAAE3F,gBAAiB;cAAC4F,QAAQ,EAAEjH;YAAe;cAAA0C,QAAA,EAAAiE,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAnE,QAAA,EAAAiE,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/E;QAAC;UAAAnE,QAAA,EAAAiE,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACNlH,OAAA;UAAK8G,SAAS,EAAC,YAAY;UAAAC,QAAA,eACzB/G,OAAA;YAAO8G,SAAS,EAAE,gBAAgB3G,YAAY,GAAG,UAAU,GAAG,EAAE,EAAG;YAAA4G,QAAA,GAAE,eAEnE,eAAA/G,OAAA;cAAOmH,IAAI,EAAC,MAAM;cAACI,eAAe,EAAC,EAAE;cAACC,SAAS,EAAC,EAAE;cAACJ,QAAQ;cAACC,QAAQ,EAAElF,kBAAmB;cAACmF,QAAQ,EAAEnH;YAAa;cAAA4C,QAAA,EAAAiE,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAnE,QAAA,EAAAiE,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/G;QAAC;UAAAnE,QAAA,EAAAiE,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAnE,QAAA,EAAAiE,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNlH,OAAA;QAAQ8G,SAAS,EAAC,eAAe;QAACW,OAAO,EAAExB,qBAAsB;QAACqB,QAAQ,EAAErG,WAAW,IAAIE,WAAY;QAAA4F,QAAA,EACpG9F,WAAW,GAAG,cAAc,GAAGE,WAAW,GAAG,sBAAsB,GAAG;MAAQ;QAAA4B,QAAA,EAAAiE,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC;IAAA;MAAAnE,QAAA,EAAAiE,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAELzG,aAAa,CAACqB,MAAM,GAAG,CAAC,iBACvB9B,OAAA;MAAK8G,SAAS,EAAC,0BAA0B;MAAAC,QAAA,gBACvC/G,OAAA;QAAA+G,QAAA,EAAI;MAAwB;QAAAhE,QAAA,EAAAiE,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjClH,OAAA;QAAA+G,QAAA,EACGtG,aAAa,CAAC+C,GAAG,CAAC,CAACF,IAAI,EAAEoE,KAAK,kBAC7B1H,OAAA;UAAA+G,QAAA,GACGzD,IAAI,CAACf,IAAI,EACTtB,WAAW,IAAII,YAAY,CAACiC,IAAI,CAACf,IAAI,CAAC,KAAKoF,SAAS,iBACnD3H,OAAA;YAAM4H,KAAK,EAAE;cAAEC,UAAU,EAAE,MAAM;cAAEC,QAAQ,EAAE;YAAO,CAAE;YAAAf,QAAA,GAAC,aAC1C,EAAC1F,YAAY,CAACiC,IAAI,CAACf,IAAI,CAAC,EAAC,GACtC;UAAA;YAAAQ,QAAA,EAAAiE,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CACP,EACA/F,WAAW,IAAII,gBAAgB,CAAC+B,IAAI,CAACf,IAAI,CAAC,KAAKoF,SAAS,iBACvD3H,OAAA;YAAM4H,KAAK,EAAE;cAAEC,UAAU,EAAE,MAAM;cAAEC,QAAQ,EAAE;YAAO,CAAE;YAAAf,QAAA,EAAC;UAEvD;YAAAhE,QAAA,EAAAiE,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CACP,EAEAvG,YAAY,CAACG,QAAQ,IAAIH,YAAY,CAACK,eAAe,CAAC+G,QAAQ,CAACzE,IAAI,CAACf,IAAI,CAAC,iBACxEvC,OAAA;YAAQyH,OAAO,EAAEA,CAAA,KAAMf,gBAAgB,CAACpD,IAAI,CAACf,IAAI,CAAE;YAACuE,SAAS,EAAC,iBAAiB;YAAAC,QAAA,EAAC;UAEhF;YAAAhE,QAAA,EAAAiE,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA,GAjBMQ,KAAK;UAAA3E,QAAA,EAAAiE,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAkBV,CACL;MAAC;QAAAnE,QAAA,EAAAiE,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAnE,QAAA,EAAAiE,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAnE,QAAA,EAAAiE,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChH,EAAA,CAhSuBD,QAAQ;AAAA+H,EAAA,GAAR/H,QAAQ;AAAA,IAAA+H,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}