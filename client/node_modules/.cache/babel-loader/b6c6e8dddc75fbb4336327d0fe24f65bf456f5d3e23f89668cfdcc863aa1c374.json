{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flore\\\\OneDrive\\\\Dokumen\\\\GitHub\\\\HauntAI\\\\client\\\\src\\\\pages\\\\HomePage\\\\Homepage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Homepage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomePage() {\n  _s();\n  const [fileUploaded, setFileUploaded] = useState(false);\n  const [folderUploaded, setFolderUploaded] = useState(false);\n  const [folderContents, setFolderContents] = useState([]);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [uploadStatus, setUploadStatus] = useState({\n    uploaded: false,\n    analyzed: false,\n    message: \"\",\n    analysisResults: [] // Menyimpan hasil analisis\n  });\n  const [isUploading, setIsUploading] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false); // Track analysis status\n  const [fileProgress, setFileProgress] = useState({}); // Track progress per file\n  const [analysisProgress, setAnalysisProgress] = useState({}); // Track analysis progress\n\n  const CHUNK_SIZE = 1024 * 1024 * 500; // 500MB\n\n  const handleFileUpload = event => {\n    const files = event.target.files;\n    if (files.length > 0) {\n      setSelectedFiles(Array.from(files));\n      setFileUploaded(true);\n      setFolderUploaded(false);\n      console.log(`Selected ${files.length} files for upload`);\n    }\n  };\n  const handleFolderUpload = event => {\n    const files = event.target.files;\n    let fileList = [];\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].name.endsWith(\".js\") || files[i].name.endsWith(\".py\")) {\n        fileList.push(files[i]);\n      }\n    }\n    if (fileList.length > 0) {\n      setSelectedFiles(fileList);\n      setFolderUploaded(true);\n      setFileUploaded(false);\n      setFolderContents(fileList.map(file => file.name));\n      console.log(`Selected ${fileList.length} files from folder`);\n    } else {\n      console.warn(\"No .js or .py files found in folder\");\n      alert(\"Tidak ada file dengan ekstensi .js atau .py yang ditemukan.\");\n      setFolderUploaded(false);\n    }\n  };\n  const uploadChunk = async (file, start, chunk, sessionId) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk);\n    formData.append(\"sessionId\", sessionId);\n    formData.append(\"start\", start);\n    formData.append(\"total_size\", file.size);\n    formData.append(\"filename\", file.name);\n    console.log(`Uploading chunk for ${file.name}: ${start}-${start + chunk.size} of ${file.size}`);\n    const response = await fetch(\"http://localhost:5000/upload-chunk\", {\n      method: \"POST\",\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Upload chunk failed: ${response.statusText}`);\n    }\n    const result = await response.json();\n    console.log(`Chunk upload response:`, result);\n\n    // Update progress for this specific file\n    const progress = Math.min(Math.round((start + chunk.size) / file.size * 100), 100);\n    setFileProgress(prevProgress => ({\n      ...prevProgress,\n      [file.name]: progress // Update progress for this file\n    }));\n    return result;\n  };\n\n  // Function to analyze files with Gemini API\n  const analyzeFilesWithGemini = async (savedFiles, uploadFolder) => {\n    setIsAnalyzing(true);\n    console.log(\"Starting Gemini analysis for files:\", savedFiles);\n    try {\n      // Initialize analysis progress for each file\n      const initialProgress = {};\n      savedFiles.forEach(filePath => {\n        const fileName = filePath.split('/').pop();\n        initialProgress[fileName] = 0;\n      });\n      setAnalysisProgress(initialProgress);\n\n      // Send request to analyze files\n      const analysisResponse = await fetch(\"http://localhost:5000/analyze-files\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          files: savedFiles,\n          folder: uploadFolder,\n          analysisPrompt: \"Analyze this code and identify any security vulnerabilities, hardcoded credentials, or sensitive data. Also suggest improvements for code quality and performance. Structure your response with clear sections for issues found and recommendations.\"\n        })\n      });\n      if (!analysisResponse.ok) {\n        throw new Error(\"Failed to analyze files with Gemini API\");\n      }\n      const analysisResult = await analysisResponse.json();\n      console.log(\"Analysis completed:\", analysisResult);\n      setUploadStatus(prev => ({\n        ...prev,\n        analyzed: true,\n        analysisResults: analysisResult.analyzed_files || []\n      }));\n      alert(\"Analysis complete! You can now view the results.\");\n    } catch (error) {\n      console.error(\"Analysis error:\", error);\n      alert(\"Error analyzing files: \" + error.message);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  const handleUploadToBackend = async () => {\n    if (selectedFiles.length === 0 || uploadStatus.uploaded) {\n      console.warn(\"Upload already completed or no files selected\");\n      return;\n    }\n    setIsUploading(true);\n    const sessionId = Date.now().toString();\n    console.log(`Starting upload session: ${sessionId}`);\n    try {\n      for (const file of selectedFiles) {\n        console.log(`Processing file: ${file.name} (${file.size} bytes)`);\n        let start = 0;\n        while (start < file.size) {\n          const chunk = file.slice(start, start + CHUNK_SIZE);\n          await uploadChunk(file, start, chunk, sessionId);\n          start += CHUNK_SIZE;\n        }\n        setFileProgress(prev => ({\n          ...prev,\n          [file.name]: 100\n        }));\n        console.log(`Completed uploading file: ${file.name}`);\n      }\n      console.log(\"All files uploaded, finalizing...\");\n      const finalizeResponse = await fetch(\"http://localhost:5000/finalize-upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          sessionId,\n          files: selectedFiles.map(f => ({\n            filename: f.name,\n            size: f.size\n          }))\n        })\n      });\n      if (!finalizeResponse.ok) throw new Error(\"Failed to finalize upload\");\n      const result = await finalizeResponse.json();\n      console.log(\"Upload finalized:\", result);\n      setUploadStatus({\n        uploaded: true,\n        analyzed: false,\n        message: result.message,\n        analysisResults: []\n      });\n      alert(\"Upload berhasil! Now starting analysis...\");\n      await analyzeFilesWithGemini(result.saved_files, result.folder);\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      setUploadStatus({\n        uploaded: false,\n        analyzed: false,\n        message: error.message\n      });\n      alert(\"Terjadi kesalahan saat mengupload file.\");\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  const downloadAnalysis = filename => {\n    // Fungsi untuk mendownload file hasil analisis\n    const url = `http://localhost:5000/download-analysis?filename=${filename}`;\n    window.open(url, \"_blank\"); // Membuka file di tab baru untuk di-download\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-homepage\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: \"HauntAI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload File or Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"upload-limit\",\n        children: \"Maksimum ukuran file: 1GB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-options\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-box\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `upload-label ${folderUploaded ? \"disabled\" : \"\"}`,\n            children: [\"Upload File\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              multiple: true,\n              onChange: handleFileUpload,\n              disabled: folderUploaded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-box\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `upload-label ${fileUploaded ? \"disabled\" : \"\"}`,\n            children: [\"Upload Folder\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              webkitdirectory: \"\",\n              directory: \"\",\n              multiple: true,\n              onChange: handleFolderUpload,\n              disabled: fileUploaded\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upload-button\",\n        onClick: handleUploadToBackend,\n        disabled: isUploading || isAnalyzing,\n        children: isUploading ? \"Uploading...\" : isAnalyzing ? \"Analyzing with AI...\" : \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), selectedFiles.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File yang Akan Diupload:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: selectedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [file.name, isUploading && fileProgress[file.name] !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: \"10px\",\n              fontSize: \"12px\"\n            },\n            children: [\"Uploading: \", fileProgress[file.name], \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 19\n          }, this), isAnalyzing && analysisProgress[file.name] !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: \"10px\",\n              fontSize: \"12px\"\n            },\n            children: \"Analyzing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 19\n          }, this), uploadStatus.analyzed && uploadStatus.analysisResults.includes(file.name) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => downloadAnalysis(file.name),\n            className: \"download-button\",\n            children: \"Download Hasil Analisis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"4ZBrMt5cVGmzmrU61PFBP6pZxtM=\");\n_c = HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","HomePage","_s","fileUploaded","setFileUploaded","folderUploaded","setFolderUploaded","folderContents","setFolderContents","selectedFiles","setSelectedFiles","uploadStatus","setUploadStatus","uploaded","analyzed","message","analysisResults","isUploading","setIsUploading","isAnalyzing","setIsAnalyzing","fileProgress","setFileProgress","analysisProgress","setAnalysisProgress","CHUNK_SIZE","handleFileUpload","event","files","target","length","Array","from","console","log","handleFolderUpload","fileList","i","name","endsWith","push","map","file","warn","alert","uploadChunk","start","chunk","sessionId","formData","FormData","append","size","response","fetch","method","body","ok","Error","statusText","result","json","progress","Math","min","round","prevProgress","analyzeFilesWithGemini","savedFiles","uploadFolder","initialProgress","forEach","filePath","fileName","split","pop","analysisResponse","headers","JSON","stringify","folder","analysisPrompt","analysisResult","prev","analyzed_files","error","handleUploadToBackend","Date","now","toString","slice","finalizeResponse","f","filename","saved_files","downloadAnalysis","url","window","open","className","children","_jsxFileName","lineNumber","columnNumber","type","multiple","onChange","disabled","webkitdirectory","directory","onClick","index","undefined","style","marginLeft","fontSize","includes","_c","$RefreshReg$"],"sources":["C:/Users/flore/OneDrive/Dokumen/GitHub/HauntAI/client/src/pages/HomePage/Homepage.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Homepage.css\";\r\n\r\nexport default function HomePage() {\r\n  const [fileUploaded, setFileUploaded] = useState(false);\r\n  const [folderUploaded, setFolderUploaded] = useState(false);\r\n  const [folderContents, setFolderContents] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState([]);\r\n  const [uploadStatus, setUploadStatus] = useState({\r\n    uploaded: false,\r\n    analyzed: false,\r\n    message: \"\",\r\n    analysisResults: [], // Menyimpan hasil analisis\r\n  });\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false); // Track analysis status\r\n  const [fileProgress, setFileProgress] = useState({}); // Track progress per file\r\n  const [analysisProgress, setAnalysisProgress] = useState({}); // Track analysis progress\r\n\r\n  const CHUNK_SIZE = 1024 * 1024 * 500; // 500MB\r\n\r\n  const handleFileUpload = (event) => {\r\n    const files = event.target.files;\r\n    if (files.length > 0) {\r\n      setSelectedFiles(Array.from(files));\r\n      setFileUploaded(true);\r\n      setFolderUploaded(false);\r\n      console.log(`Selected ${files.length} files for upload`);\r\n    }\r\n  };\r\n\r\n  const handleFolderUpload = (event) => {\r\n    const files = event.target.files;\r\n    let fileList = [];\r\n    for (let i = 0; i < files.length; i++) {\r\n      if (files[i].name.endsWith(\".js\") || files[i].name.endsWith(\".py\")) {\r\n        fileList.push(files[i]);\r\n      }\r\n    }\r\n    if (fileList.length > 0) {\r\n      setSelectedFiles(fileList);\r\n      setFolderUploaded(true);\r\n      setFileUploaded(false);\r\n      setFolderContents(fileList.map(file => file.name));\r\n      console.log(`Selected ${fileList.length} files from folder`);\r\n    } else {\r\n      console.warn(\"No .js or .py files found in folder\");\r\n      alert(\"Tidak ada file dengan ekstensi .js atau .py yang ditemukan.\");\r\n      setFolderUploaded(false);\r\n    }\r\n  };\r\n\r\n  const uploadChunk = async (file, start, chunk, sessionId) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", chunk);\r\n    formData.append(\"sessionId\", sessionId);\r\n    formData.append(\"start\", start);\r\n    formData.append(\"total_size\", file.size);\r\n    formData.append(\"filename\", file.name);\r\n\r\n    console.log(`Uploading chunk for ${file.name}: ${start}-${start + chunk.size} of ${file.size}`);\r\n\r\n    const response = await fetch(\"http://localhost:5000/upload-chunk\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Upload chunk failed: ${response.statusText}`);\r\n    }\r\n    const result = await response.json();\r\n    console.log(`Chunk upload response:`, result);\r\n\r\n    // Update progress for this specific file\r\n    const progress = Math.min(Math.round((start + chunk.size) / file.size * 100), 100);\r\n    setFileProgress((prevProgress) => ({\r\n      ...prevProgress,\r\n      [file.name]: progress, // Update progress for this file\r\n    }));\r\n\r\n    return result;\r\n  };\r\n\r\n  // Function to analyze files with Gemini API\r\n  const analyzeFilesWithGemini = async (savedFiles, uploadFolder) => {\r\n    setIsAnalyzing(true);\r\n    console.log(\"Starting Gemini analysis for files:\", savedFiles);\r\n    \r\n    try {\r\n      // Initialize analysis progress for each file\r\n      const initialProgress = {};\r\n      savedFiles.forEach(filePath => {\r\n        const fileName = filePath.split('/').pop();\r\n        initialProgress[fileName] = 0;\r\n      });\r\n      setAnalysisProgress(initialProgress);\r\n      \r\n      // Send request to analyze files\r\n      const analysisResponse = await fetch(\"http://localhost:5000/analyze-files\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          files: savedFiles,\r\n          folder: uploadFolder,\r\n          analysisPrompt: \"Analyze this code and identify any security vulnerabilities, hardcoded credentials, or sensitive data. Also suggest improvements for code quality and performance. Structure your response with clear sections for issues found and recommendations.\",\r\n        }),\r\n      });\r\n\r\n      if (!analysisResponse.ok) {\r\n        throw new Error(\"Failed to analyze files with Gemini API\");\r\n      }\r\n\r\n      const analysisResult = await analysisResponse.json();\r\n      console.log(\"Analysis completed:\", analysisResult);\r\n\r\n      setUploadStatus(prev => ({\r\n        ...prev,\r\n        analyzed: true,\r\n        analysisResults: analysisResult.analyzed_files || [],\r\n      }));\r\n\r\n      alert(\"Analysis complete! You can now view the results.\");\r\n    } catch (error) {\r\n      console.error(\"Analysis error:\", error);\r\n      alert(\"Error analyzing files: \" + error.message);\r\n    } finally {\r\n      setIsAnalyzing(false);\r\n    }\r\n  };\r\n\r\n  const handleUploadToBackend = async () => {\r\n    if (selectedFiles.length === 0 || uploadStatus.uploaded) {\r\n      console.warn(\"Upload already completed or no files selected\");\r\n      return;\r\n    }\r\n\r\n    setIsUploading(true);\r\n    const sessionId = Date.now().toString();\r\n    console.log(`Starting upload session: ${sessionId}`);\r\n\r\n    try {\r\n      for (const file of selectedFiles) {\r\n        console.log(`Processing file: ${file.name} (${file.size} bytes)`);\r\n        let start = 0;\r\n        while (start < file.size) {\r\n          const chunk = file.slice(start, start + CHUNK_SIZE);\r\n          await uploadChunk(file, start, chunk, sessionId);\r\n          start += CHUNK_SIZE;\r\n        }\r\n        setFileProgress(prev => ({ ...prev, [file.name]: 100 }));\r\n        console.log(`Completed uploading file: ${file.name}`);\r\n      }\r\n\r\n      console.log(\"All files uploaded, finalizing...\");\r\n      const finalizeResponse = await fetch(\"http://localhost:5000/finalize-upload\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ sessionId, files: selectedFiles.map(f => ({ filename: f.name, size: f.size })) }),\r\n      });\r\n\r\n      if (!finalizeResponse.ok) throw new Error(\"Failed to finalize upload\");\r\n\r\n      const result = await finalizeResponse.json();\r\n      console.log(\"Upload finalized:\", result);\r\n\r\n      setUploadStatus({ uploaded: true, analyzed: false, message: result.message, analysisResults: [] });\r\n      alert(\"Upload berhasil! Now starting analysis...\");\r\n\r\n      await analyzeFilesWithGemini(result.saved_files, result.folder);\r\n    } catch (error) {\r\n      console.error(\"Upload error:\", error);\r\n      setUploadStatus({ uploaded: false, analyzed: false, message: error.message });\r\n      alert(\"Terjadi kesalahan saat mengupload file.\");\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  const downloadAnalysis = (filename) => {\r\n    // Fungsi untuk mendownload file hasil analisis\r\n    const url = `http://localhost:5000/download-analysis?filename=${filename}`;\r\n    window.open(url, \"_blank\"); // Membuka file di tab baru untuk di-download\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-homepage\">\r\n      <nav className=\"navbar\">HauntAI</nav>\r\n      <div className=\"upload-container\">\r\n        <h2>Upload File or Folder</h2>\r\n        <p className=\"upload-limit\">Maksimum ukuran file: 1GB</p>\r\n        <div className=\"upload-options\">\r\n          <div className=\"upload-box\">\r\n            <label className={`upload-label ${folderUploaded ? \"disabled\" : \"\"}`} >\r\n              Upload File\r\n              <input type=\"file\" multiple onChange={handleFileUpload} disabled={folderUploaded} />\r\n            </label>\r\n          </div>\r\n          <div className=\"upload-box\">\r\n            <label className={`upload-label ${fileUploaded ? \"disabled\" : \"\"}`} >\r\n              Upload Folder\r\n              <input type=\"file\" webkitdirectory=\"\" directory=\"\" multiple onChange={handleFolderUpload} disabled={fileUploaded} />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <button className=\"upload-button\" onClick={handleUploadToBackend} disabled={isUploading || isAnalyzing}>\r\n          {isUploading ? \"Uploading...\" : isAnalyzing ? \"Analyzing with AI...\" : \"Upload\"}\r\n        </button>\r\n      </div>\r\n\r\n      {selectedFiles.length > 0 && (\r\n        <div className=\"folder-content-container\">\r\n          <h3>File yang Akan Diupload:</h3>\r\n          <ul>\r\n            {selectedFiles.map((file, index) => (\r\n              <li key={index}>\r\n                {file.name}\r\n                {isUploading && fileProgress[file.name] !== undefined && (\r\n                  <span style={{ marginLeft: \"10px\", fontSize: \"12px\" }}>\r\n                    Uploading: {fileProgress[file.name]}%\r\n                  </span>\r\n                )}\r\n                {isAnalyzing && analysisProgress[file.name] !== undefined && (\r\n                  <span style={{ marginLeft: \"10px\", fontSize: \"12px\" }}>\r\n                    Analyzing...\r\n                  </span>\r\n                )}\r\n                {/* Tombol Download Hasil Analisis */}\r\n                {uploadStatus.analyzed && uploadStatus.analysisResults.includes(file.name) && (\r\n                  <button onClick={() => downloadAnalysis(file.name)} className=\"download-button\">\r\n                    Download Hasil Analisis\r\n                  </button>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}